import json
from script.llm import query_llm
from tqdm import tqdm
import time

def exploitability_riskprioritizer():
    json_file = "data/scan_results_filtered.json"

    def riskPrioritizerValue(cvss,exploitability,svc_name):
        if cvss != "":
            service_map = {
                # Database services - Critical (10)
                "mysql": ("database", 10),
                "postgresql": ("database", 10),
                "mssql": ("database", 10),
                "oracle": ("database", 10),
                "mongodb": ("database", 10),
                "redis": ("database", 10),

                # Web servers - High (8)
                "http": ("web_server", 8),
                "https": ("web_server", 8),
                "apache": ("web_server", 8),
                "nginx": ("web_server", 8),
                "iis": ("web_server", 8),
                "ajp13": ("web_server", 8),

                # Domain controllers - Critical (10)
                "ldap": ("domain_controller", 10),
                "ldaps": ("domain_controller", 10),
                "kerberos": ("domain_controller", 10),

                # Mail servers - High (8)
                "smtp": ("mail_server", 8),
                "pop3": ("mail_server", 8),
                "imap": ("mail_server", 8),
                "exchange": ("mail_server", 8),

                # File servers - High (8)
                "ftp": ("file_server", 8),
                "sftp": ("file_server", 8),
                "nfs": ("file_server", 8),
                "smb": ("file_server", 8),
                "cifs": ("file_server", 8),

                # Infrastructure servers - Medium (6)
                "dns": ("infrastructure_server", 6),
                "dhcp": ("infrastructure_server", 6),
                "ntp": ("infrastructure_server", 6),
                "ssh": ("server", 6),

                # Communication servers - Medium (5)
                "irc": ("communication_server", 5),
                "sip": ("communication_server", 5),

                # Workstations - Medium (5)
                "rdp": ("workstation", 5),
                "vnc": ("workstation", 5),

                # Network devices - Medium (4)
                "snmp": ("network_device", 4),

                # Legacy/insecure - Low but risky (3)
                "telnet": ("legacy_server", 3),
                "rlogin": ("legacy_server", 3)
            }

            # Uso:
            asset_type, asset_criticality = service_map.get(svc_name.lower(),("unknown", 5))

            asset_exploitability_map = {
                "high": 10,
                "medium": 6,
                "low": 3
            }

            exploitability_score=asset_exploitability_map.get(exploitability.lower(),1)

            RiskScore = (float(cvss) * 0.6) + (exploitability_score * 0.3) + (asset_criticality * 0.1)


            return round(RiskScore,2)
        else:
            return "[CVSS] Missing Data"


    with open(json_file, "r") as f:
        data = json.load(f)



    i = 0  # ad esempio, riprendi dal quarto elemento
    fine = len(data)
    time.sleep(0.5)
    for idx in tqdm(range(i, fine), desc="Predizione sfruttabilità e prioritizzazione del rischio:", leave=True):
        entry = data[idx]

        plugin="Id="+entry.get("plugin_id", "N/A")+" Name="+entry.get("plugin_name", "N/A")
        prompt = f"""
        Service: {entry.get("svc_name", "N/A")}
        Plugin Used: {plugin}
        Severity: {entry.get("severity", "N/A")}
        Risk Factor: {entry.get("risk_factor", "N/A")}
        Exploit Available: {"Missing data" if (temp := entry.get("exploit_available", "N/A")) == "" else temp}
        Exploitability Ease: {"Missing data" if (temp := entry.get("exploitability_ease", "N/A")) == "" else temp}
        Solution: {"Missing data" if (temp := entry.get("solution", "N/A")) == ""  else temp}
        CVE: {"Missing data" if (temp := entry.get("cve_list", "N/A")) == "" else temp}
        CVSS: {"Missing data" if (temp := entry.get("cvss3_base_score", "N/A")) == "" else temp}
        CWE: {"Missing data" if (temp := entry.get("cwe", "N/A")) == "" else temp}
        Just write Exploitability Score as High/Medium/Low. small description. json object
        """

        value=query_llm(prompt)

        start = value.find('{')
        end = value.find('}', start )+1
        full_command = value[start:end]

        ogg=json.loads(full_command)

        entry["exploitability"] = ogg.get("Exploitability Score", "N/A")
        entry["description_exploitability_value"] = ogg.get("Description", "N/A")
        entry["risk_value"] = riskPrioritizerValue(entry.get("cvss3_base_score", "N/A"),ogg.get("Exploitability Score", "N/A"),entry.get("svc_name", "N/A"))


    with open(json_file, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

    tqdm.write(f"[✓] 3. Report JSON aggiornato: {json_file}")

